[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://l0dihwgr687x"]

[sub_resource type="Shader" id="Shader_kyaqh"]
code = "shader_type canvas_item;
uniform vec4 flash_color:source_color = vec4(1.0);
uniform float flash_opacity:hint_range(0.0, 1.0, 0.1) = 0.0;


void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	vec4 color = texture(TEXTURE, UV);
	color.rgb = mix(color.rgb, flash_color.rgb, flash_opacity);
	COLOR = color;
	
	// Called for every pixel the material is visible on.
}

//void light() {
	// Called for every pixel for every light affecting the CanvasItem.
	// Uncomment to replace the default light processing function with this one.
//}
"

[resource]
resource_local_to_scene = true
shader = SubResource("Shader_kyaqh")
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_opacity = 0.0
